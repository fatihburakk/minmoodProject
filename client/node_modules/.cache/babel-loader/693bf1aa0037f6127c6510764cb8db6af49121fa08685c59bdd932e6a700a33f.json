{"ast":null,"code":"import axios from 'axios';\nimport { supabase } from '../lib/supabase';\nexport const login = async (email, password) => {\n  const response = await axios.post('/api/auth/login', {\n    email,\n    password\n  });\n  return response.data;\n};\nexport async function updateProfile({\n  username,\n  email\n}) {\n  // First update auth user\n  const {\n    data: authData,\n    error: authError\n  } = await supabase.auth.updateUser({\n    email,\n    data: {\n      username\n    }\n  });\n  if (authError) throw authError;\n\n  // Then update public users table\n  const {\n    error: userError\n  } = await supabase.from('users').update({\n    username,\n    email\n  }).eq('id', authData.user.id);\n  if (userError) throw userError;\n  return {\n    data: authData,\n    error: null\n  };\n}\nexport async function changePassword(newPassword) {\n  return await supabase.auth.updateUser({\n    password: newPassword\n  });\n}\nexport async function deleteAccount() {\n  // Kullanıcı kendi hesabını silemez, admin yetkisi gerekir. Burada sadece oturumu kapatıyoruz.\n  return await supabase.auth.signOut();\n}","map":{"version":3,"names":["axios","supabase","login","email","password","response","post","data","updateProfile","username","authData","error","authError","auth","updateUser","userError","from","update","eq","user","id","changePassword","newPassword","deleteAccount","signOut"],"sources":["C:/Users/Fatih/Desktop/DuyguProjeWeb/duygu_proje_web/client/src/services/authService.js"],"sourcesContent":["import axios from 'axios';\r\nimport { supabase } from '../lib/supabase';\r\n\r\nexport const login = async (email, password) => {\r\n  const response = await axios.post('/api/auth/login', { email, password });\r\n  return response.data;\r\n};\r\n\r\nexport async function updateProfile({ username, email }) {\r\n  // First update auth user\r\n  const { data: authData, error: authError } = await supabase.auth.updateUser({\r\n    email,\r\n    data: { username }\r\n  });\r\n\r\n  if (authError) throw authError;\r\n\r\n  // Then update public users table\r\n  const { error: userError } = await supabase\r\n    .from('users')\r\n    .update({ username, email })\r\n    .eq('id', authData.user.id);\r\n\r\n  if (userError) throw userError;\r\n\r\n  return { data: authData, error: null };\r\n}\r\n\r\nexport async function changePassword(newPassword) {\r\n  return await supabase.auth.updateUser({\r\n    password: newPassword\r\n  });\r\n}\r\n\r\nexport async function deleteAccount() {\r\n  // Kullanıcı kendi hesabını silemez, admin yetkisi gerekir. Burada sadece oturumu kapatıyoruz.\r\n  return await supabase.auth.signOut();\r\n} "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,QAAQ,QAAQ,iBAAiB;AAE1C,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;EAC9C,MAAMC,QAAQ,GAAG,MAAML,KAAK,CAACM,IAAI,CAAC,iBAAiB,EAAE;IAAEH,KAAK;IAAEC;EAAS,CAAC,CAAC;EACzE,OAAOC,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,eAAeC,aAAaA,CAAC;EAAEC,QAAQ;EAAEN;AAAM,CAAC,EAAE;EACvD;EACA,MAAM;IAAEI,IAAI,EAAEG,QAAQ;IAAEC,KAAK,EAAEC;EAAU,CAAC,GAAG,MAAMX,QAAQ,CAACY,IAAI,CAACC,UAAU,CAAC;IAC1EX,KAAK;IACLI,IAAI,EAAE;MAAEE;IAAS;EACnB,CAAC,CAAC;EAEF,IAAIG,SAAS,EAAE,MAAMA,SAAS;;EAE9B;EACA,MAAM;IAAED,KAAK,EAAEI;EAAU,CAAC,GAAG,MAAMd,QAAQ,CACxCe,IAAI,CAAC,OAAO,CAAC,CACbC,MAAM,CAAC;IAAER,QAAQ;IAAEN;EAAM,CAAC,CAAC,CAC3Be,EAAE,CAAC,IAAI,EAAER,QAAQ,CAACS,IAAI,CAACC,EAAE,CAAC;EAE7B,IAAIL,SAAS,EAAE,MAAMA,SAAS;EAE9B,OAAO;IAAER,IAAI,EAAEG,QAAQ;IAAEC,KAAK,EAAE;EAAK,CAAC;AACxC;AAEA,OAAO,eAAeU,cAAcA,CAACC,WAAW,EAAE;EAChD,OAAO,MAAMrB,QAAQ,CAACY,IAAI,CAACC,UAAU,CAAC;IACpCV,QAAQ,EAAEkB;EACZ,CAAC,CAAC;AACJ;AAEA,OAAO,eAAeC,aAAaA,CAAA,EAAG;EACpC;EACA,OAAO,MAAMtB,QAAQ,CAACY,IAAI,CAACW,OAAO,CAAC,CAAC;AACtC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}